library(data.table)
library(pheatmap)
library(reshape2)
library(plyr)
library(grid)
library(caret)
#first we'll look at the VCF file and omit data with coverage outliers and high missing data
library(vcfR)
vcf <- read.vcfR("/Users/jd/Library/Mobile\ Documents/com~apple~CloudDocs/PSRF/Abalone/SbfI-test-singleSNP/populations.snps.vcf", verbose = FALSE )
vcf
head(vcf)
head(is.polymorphic(vcf, na.omit = TRUE))
head(is.biallelic(vcf))
rversion()
R.version()
R.version
ibrary(qpcR)
data <- read.table("/Users/jd/Documents/Projects/SeaDoc_Abalone/Abalone_tank_eDNA_122320.txt", sep = "\t", skip = 7)
names(data) <- as.matrix(data[1, ])
data <- data[-1, ]
data[] <- lapply(data, function(x) type.convert(as.character(x)))
data
data2 <- data[data$`Target Name` == "SNP Assay 1-Allele 2", ]
data2 <- data2[,c(-3,-4)]
library(reshape2)
data2_wide <- dcast(data2,Cycle ~ Well, value.var = 'ΔRn')
pcr1 <- modlist(data2_wide,1, smooth = 'lowess')
pcr2 <- matrix(unlist(pcr1))
plot(pcr1[[77]])
plot(data2_wide$Cycle, data2_wide$H2, type = "l")
abline(0.113737967,0)
locator()
levels(data2$Well) <- c('N','C02','C02','C02','N','N','C01','C01','C01','C01','C01','C01','C02','C13',
'C13','C13','C02','C02','C03','C03','C03','C03','C03','C03','C13','C05','C05','C05','C13',
'C13','C18','C18','C18','C18','C18','C18','C05','C14','C14','C14','C05','C05','C07',
'C07','C07','C07','C07','C07','C14','D18','D18','D18','C14','C14','C17','C17','C17',
'C17','C17','C17','D18','S1','S1','S1','D18','D18','B','B','B','B','B','B','S2','S5',
'S5','S5','S2','S2','S3','S3','S3','S4','S4','S4','S6','S9','S9','S9','S6','S6','S7',
'S7','S7','S8','S8','S8')
library(ggplot2)
ggplot(data2, aes(x=Cycle, y=ΔRn, color = Well)) +
geom_point() +
geom_hline(yintercept = 0.113737967)
library(ggplot2)
ggplot(data2, aes(x=Cycle, y=ΔRn, color = Well)) +
geom_line() +
geom_hline(yintercept = 0.113737967)
colnames(data2)[1] = Sample
colnames(data2)[1] = "Sample"
library(ggplot2)
ggplot(data2, aes(x=Cycle, y=ΔRn, color = Sample)) +
geom_line() +
geom_hline(yintercept = 0.113737967)
library(ggplot2)
ggplot(data2, aes(x=Cycle, y=ΔRn, color = Sample)) +
geom_point() +
geom_hline(yintercept = 0.113737967)
ggplot(data2[c(272:5626),], aes(x=Cycle, y=ΔRn, color = Sample)) +
geom_point() +
geom_hline(yintercept = 0.113737967)
data2[c(272:5626),]
samples <- data2[c(272:5626),]
ggplot(samples, aes(x=Cycle, y=ΔRn, color = Sample)) +
geom_point() +
geom_hline(yintercept = 0.113737967)
View(samples)
samples <- data2[c(272:5626),1]
samples <- data2[c(1:3105),]
View(samples)
library(ggplot2)
ggplot(samples, aes(x=Cycle, y=ΔRn, color = Sample)) +
geom_point() +
geom_hline(yintercept = 0.113737967)
plot(data2_wide$Cycle, data2_wide$H2, type = "l")
abline(0.113737967,0)
data2_wide <- dcast(data2,Cycle ~ Well, value.var = 'ΔRn')
data2 <- data2[,c(-3,-4)]
View(data2)
data2 <- data[data$`Target Name` == "SNP Assay 1-Allele 2", ]
data2 <- data2[,c(-3,-4)]
View(data2)
data2$Well <- c('N','C02','C02','C02','N','N','C01','C01','C01','C01','C01','C01','C02','C13',
'C13','C13','C02','C02','C03','C03','C03','C03','C03','C03','C13','C05','C05','C05','C13',
'C13','C18','C18','C18','C18','C18','C18','C05','C14','C14','C14','C05','C05','C07',
'C07','C07','C07','C07','C07','C14','D18','D18','D18','C14','C14','C17','C17','C17',
'C17','C17','C17','D18','S1','S1','S1','D18','D18','B','B','B','B','B','B','S2','S5',
'S5','S5','S2','S2','S3','S3','S3','S4','S4','S4','S6','S9','S9','S9','S6','S6','S7',
'S7','S7','S8','S8','S8')
data2 <- data[data$`Target Name` == "SNP Assay 1-Allele 2", ]
data2 <- data2[,c(-3,-4)]
data2$Sample <- c('N','C02','C02','C02','N','N','C01','C01','C01','C01','C01','C01','C02','C13',
'C13','C13','C02','C02','C03','C03','C03','C03','C03','C03','C13','C05','C05','C05','C13',
'C13','C18','C18','C18','C18','C18','C18','C05','C14','C14','C14','C05','C05','C07',
'C07','C07','C07','C07','C07','C14','D18','D18','D18','C14','C14','C17','C17','C17',
'C17','C17','C17','D18','S1','S1','S1','D18','D18','B','B','B','B','B','B','S2','S5',
'S5','S5','S2','S2','S3','S3','S3','S4','S4','S4','S6','S9','S9','S9','S6','S6','S7',
'S7','S7','S8','S8','S8')
data2$Sample <- c(rep('N',135))
data2 <- data[data$`Target Name` == "SNP Assay 1-Allele 2", ]
data2 <- data2[,c(-3,-4)]
data2$Well <- c('N','C02','C02','C02','N','N','C01','C01','C01','C01','C01','C01','C02','C13',
'C13','C13','C02','C02','C03','C03','C03','C03','C03','C03','C13','C05','C05','C05','C13',
'C13','C18','C18','C18','C18','C18','C18','C05','C14','C14','C14','C05','C05','C07',
'C07','C07','C07','C07','C07','C14','D18','D18','D18','C14','C14','C17','C17','C17',
'C17','C17','C17','D18','S1','S1','S1','D18','D18','B','B','B','B','B','B','S2','S5',
'S5','S5','S2','S2','S3','S3','S3','S4','S4','S4','S6','S9','S9','S9','S6','S6','S7',
'S7','S7','S8','S8','S8')
data <- read.table("/Users/jd/Documents/Projects/SeaDoc_Abalone/Abalone_tank_eDNA_122320.txt", sep = "\t", skip = 7)
names(data) <- as.matrix(data[1, ])
data <- data[-1, ]
data[] <- lapply(data, function(x) type.convert(as.character(x)))
data
data2 <- data[data$`Target Name` == "SNP Assay 1-Allele 2", ]
data2 <- data2[,c(-3,-4)]
library(reshape2)
data2_wide <- dcast(data2,Cycle ~ Well, value.var = 'ΔRn')
pcr1 <- modlist(data2_wide,1, smooth = 'lowess')
pcr2 <- matrix(unlist(pcr1))
plot(pcr1[[77]])
plot(data2_wide$Cycle, data2_wide$H2, type = "l")
abline(0.113737967,0)
locator()
install.packages("sommer")
library(sommer)
set.seed(1253)
pp <- abs(rnorm(500,0,3));pp[23:34] <- abs(rnorm(12,0,20))
####=========================================####
#### see how they look like
####=========================================####
plot(pp, col=transp("cadetblue"), pch=20, cex=1.5)
####=========================================####
#### adjust the values for FDR and see how they look like
####=========================================####
new.pp <- fdr(pp)
setwd("~/Documents/Projects/Anthopleura/Methylation-splicing/Ae_meth/analyses/")
#open nanopore methylation data
Aele_meth_freq <-read.delim("methylation_frequency_thresh10.tsv", sep = "\t", header=T)
#get average meth frequency
Aele_meth_avg <- aggregate(methylated_frequency ~ chromosome, Aele_meth_freq, mean)
#get sum of CpG motifs
Aele_CpG_motifs <- aggregate(num_motifs_in_group ~ chromosome, Aele_meth_freq, sum)
#merge meth frequency and sum motifs
Meth_avg_sum_motifs <-merge(Aele_meth_avg,Aele_CpG_motifs,by="chromosome")
#open file with seq length and CpG counts (length is V4, CpG count is V5)
Aele_comb <-read.delim("comb", header=F)
View(Aele_comb)
#just get seq length and CpG counts
Aele_comb2 <- Aele_comb[,c(1,4,5)]
View(Aele_comb2)
#open CpG O/E data
Aele_cpgoe <-read.delim("ID_CpG", header=F)
#remove extra space in seq id
Aele_cpgoe2 <- as.data.frame(apply(Aele_cpgoe,2,function(x)gsub('\\s+', '',x)))
#change CpG data from factor to numeric
Aele_cpgoe2[,2] <-as.numeric(as.character(Aele_cpgoe2[,2]))
#merge nanopore data with seq length data
temp_merge <-merge(Meth_avg_sum_motifs,Aele_comb2,by.x="chromosome",by.y="V1")
#merge above data with CpG O/E
All_data <-merge(temp_merge,Aele_cpgoe2,by.x="chromosome",by.y="V1")
#rename columns
colnames(All_data)[4] <- "seq_length"
colnames(All_data)[5] <- "num_CpGs"
colnames(All_data)[6] <- "CpG_OE"
View(All_data)
#now determine CpG coverage of nanopore data
cpg_cov <- All_data[,3]/All_data[,5]
#bind cpg_cov to dataframe
All_data <- cbind(All_data, cpg_cov)
View(All_data)
#now set threshold of 20% CpG coverage to data
All_data_thresh <- All_data[All_data[,7] >= 0.2,]
#now set threshold of 2 for CpG O/E
All_data_thresh <- All_data_thresh[All_data_thresh[,6] <= 2,]
#smooth scatter plot of nanopore meth data vs. CpG O/E data
plot(All_data_thresh[,2], All_data_thresh[,6])
#linear regression of nanopore meth data vs. CpG O/E data
model <- lm(All_data_thresh[,2] ~ All_data_thresh[,6])
abline(model, col = "green")
library(ggplot2)
library(ggpubr)
# Scatter plot with density panels using ggplot and ggpubr
sp <- ggscatter(All_data_thresh, x = "methylated_frequency", y = "CpG_OE",
color = "#0073C2FF", size = 0.4, alpha = 0.1,
add = "loess", add.params = list(color = "#EFC000FF"),
cor.coef = TRUE,
cor.coeff.args = list(method = "pearson",
label.x.npc = "right", label.y.npc = "top"),
ylab = "CpG O/E", xlab = "Methylated frequency")+
border()
# Marginal density plot of x (top panel) and y (right panel)
xplot <- ggdensity(All_data_thresh, "methylated_frequency")
yplot <- ggdensity(All_data_thresh, "CpG_OE")+
rotate()
# Cleaning the plots
yplot <- yplot + clean_theme()
xplot <- xplot + clean_theme()
# Arranging the plot
ggarrange(xplot, NULL, sp, yplot,
ncol = 2, nrow = 3,  align = "hv",
widths = c(2, 1), heights = c(1, 2),
common.legend = TRUE)
CpGOE_0 <- as.numeric(All_data_thresh$CpG_OE[All_data_thresh[,2] == 0])
CpGOE_1 <- as.numeric(All_data_thresh$CpG_OE[All_data_thresh[,2] == 1])
CpGOE_0 <- cbind(CpGOE_0, rep("Fully unmethylated", length(CpGOE_0)))
CpGOE_1 <- cbind(CpGOE_1, rep("Fully methylated", length(CpGOE_1)))
CpG_01 <- as.data.frame(rbind(CpGOE_1, CpGOE_0))
CpG_01[,1] <- as.numeric(as.character(CpG_01[,1]))
CpG_01$V2 = factor(CpG_01$V2,c("Fully unmethylated","Fully methylated"))
#boxplot
bxp <- ggboxplot(CpG_01, x = "V2", y = "CpGOE_1",
color = "V2", palette = c("#0073C2FF", "#EFC000FF"),
xlab = "", ylab = "CpG O/E", show.legend = FALSE)
bxp
View(CpG_01)
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1)) +
geom_violin()
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1)) +
geom_violin() +
scale_color_manual(values=cc("#0073C2FF", "#EFC000FF"))
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1)) +
geom_violin() +
scale_color_manual(values=c("#0073C2FF", "#EFC000FF"))
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1), color=V2) +
geom_violin() +
scale_color_manual(values=c("#0073C2FF", "#EFC000FF"))
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1), color=V2, palette = c("#0073C2FF", "#EFC000FF")) +
geom_violin()
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1), color=V2) +
geom_violin()
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1), color=V2) +
geom_violin()
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1), color="V2") +
geom_violin()
viol
viol <- ggplot(CpG_01, aes(x="V2", y="CpGOE_1"), color="V2") +
geom_violin()
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1), color=V2) +
geom_violin()
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1), color=V2) +
scale_color_manual(values=c("#999999", "#E69F00"))+
geom_violin()
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1), color=V2) +
geom_violin() +
scale_color_manual(values=c("#999999", "#E69F00"))
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1), color=V2) +
geom_violin() +
scale_color_manual(values=c("#999999", "#E69F00"))
viol
viol <- ggplot(data = CpG_01)
geom_violin(aes(x=V2, y=CpGOE_1), color=V2)) +
scale_color_manual(values=c("#999999", "#E69F00"))
viol
viol <- ggplot(data = CpG_01) +
geom_violin(aes(x=V2, y=CpGOE_1), color=V2) +
scale_color_manual(values=c("#999999", "#E69F00"))
viol
viol <- ggplot(data = CpG_01) +
geom_violin(aes(x="V2", y="CpGOE_1"), color="V2") +
scale_color_manual(values=c("#999999", "#E69F00"))
viol
viol <- ggplot(data = CpG_01) +
geom_violin(aes(x=V2, y=CpGOE_1), color=c("#999999", "#E69F00"))
viol
p <- ggplot(CpG_01, aes(factor(V2), CpGOE_1))
p + geom_violin()
p
> viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1)) +
geom_violin()
> viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1)) +
geom_violin()
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1)) +
geom_violin(aes(fill = V2))
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1)) +
geom_violin(aes(fill = V2), palette = c("#0073C2FF", "#EFC000FF"))
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1)) +
geom_violin(aes(fill = V2), color = c("#0073C2FF", "#EFC000FF"))
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1)) +
geom_violin(aes(fill = V2, color = c("#0073C2FF", "#EFC000FF")))
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1)) +
geom_violin(aes(fill = V2))
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1)) +
geom_violin(aes(fill = V2)) +
scale_color_manual(c("#0073C2FF", "#EFC000FF"))
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1)) +
geom_violin(aes(fill = V2), colour = "#3366FF")
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1)) +
geom_violin(aes(fill = V2), colour = c("#0073C2FF", "#EFC000FF"))
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1)) +
geom_violin(fill = c("#0073C2FF", "#EFC000FF"))
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1)) +
geom_violin(fill = "#0073C2FF")
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1)) +
geom_violin(aes(fill = V2))
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1)) +
geom_violin(aes(fill = V2), palette = c("#0073C2FF", "#EFC000FF"))
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1), palette = c("#0073C2FF", "#EFC000FF")) +
geom_violin(aes(fill = V2))
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1)) +
geom_violin(aes(fill = V2))
viol+scale_fill_manual(values=c("#999999", "#E69F00"))
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1)) +
geom_violin(aes(fill = V2))
viol+scale_fill_manual(values=c("#999999", "#E69F00"))
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1)) +
geom_violin(aes(fill = V2)) +
scale_fill_manual(values=c("#999999", "#E69F00"))
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1)) +
geom_violin(aes(fill = V2)) +
scale_fill_manual(values=c("#0073C2FF", "#EFC000FF"))
viol
# Scatter plot with density panels using ggplot and ggpubr, plus boxplot
sp <- ggscatter(All_data_thresh, x = "methylated_frequency", y = "CpG_OE",
color = "#868686FF", size = 0.4, alpha = 0.1,
add = "loess", add.params = list(color = "#CD534CFF"),
cor.coef = TRUE,
cor.coeff.args = list(method = "pearson",
label.x.npc = "right", label.y.npc = "top"),
ylab = "CpG O/E", xlab = "Methylated frequency")+
border()
#Boxplot of fully meth and umeth by CpG O/E
bxp <- ggboxplot(CpG_01, x = "V2", y = "CpGOE_1",
color = "V2", palette = c("#0073C2FF", "#EFC000FF"),
xlab = "", ylab = "CpG O/E", show.legend = FALSE)
# Marginal density plot of x (top panel) and y (right panel)
xplot <- ggdensity(All_data_thresh, "methylated_frequency")
yplot <- ggdensity(All_data_thresh, "CpG_OE")+
rotate()
# Cleaning the plots
yplot <- yplot + clean_theme()
xplot <- xplot + clean_theme()
# Arranging the plots
ggarrange(xplot, NULL, sp, yplot, bxp, NULL,
ncol = 2, nrow = 3,  align = "hv",
widths = c(2, 1), heights = c(1, 2),
common.legend = TRUE)
#Boxplot of fully meth and umeth by CpG O/E
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1),xlab = "", ylab = "CpG O/E", show.legend = FALSE)) +
geom_violin(aes(fill = V2)) +
scale_fill_manual(values=c("#0073C2FF", "#EFC000FF"))
#Boxplot of fully meth and umeth by CpG O/E
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1),xlab = "", ylab = "CpG O/E", show.legend = FALSE) +
geom_violin(aes(fill = V2)) +
scale_fill_manual(values=c("#0073C2FF", "#EFC000FF"))
viol
#Boxplot of fully meth and umeth by CpG O/E
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1),xlab = "", ylab = "CpG O/E", show.legend = FALSE) +
geom_violin(aes(fill = V2)) +
scale_fill_manual(values=c("#0073C2FF", "#EFC000FF")) +
labs(x="", y = "CpG O/E")+
theme(legend.position="none")
viol
# Arranging the plots
ggarrange(sp, viol,
ncol = 2, nrow = 1,  align = "hv",
widths = c(2, 1), heights = c(1, 2),
common.legend = TRUE)
sp <- ggscatter(All_data_thresh, x = "methylated_frequency", y = "CpG_OE",
color = "#868686FF", size = 0.4, alpha = 0.1,
add = "loess", add.params = list(color = "#CD534CFF"),
cor.coef = TRUE,
cor.coeff.args = list(method = "pearson",
label.x.npc = "right", label.y.npc = "top"),
ylab = "CpG O/E", xlab = "Methylated frequency")+
border()
#Violinplot of fully meth and umeth by CpG O/E
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1),xlab = "", ylab = "CpG O/E", show.legend = FALSE) +
geom_violin(aes(fill = V2)) +
scale_fill_manual(values=c("#0073C2FF", "#EFC000FF")) +
labs(x="", y = "CpG O/E")+
theme(legend.position="none")
# Arranging the plots
ggarrange(sp, viol,
ncol = 2, nrow = 1,  align = "hv",
widths = c(2, 1), heights = c(1, 2),
common.legend = FALSE)
# Scatter plot using ggplot and ggpubr, plus boxplot
sp <- ggscatter(All_data_thresh, x = "methylated_frequency", y = "CpG_OE",
color = "#868686FF", size = 0.4, alpha = 0.1,
add = "loess", add.params = list(color = "#CD534CFF"),
cor.coef = TRUE,
cor.coeff.args = list(method = "pearson",
label.x.npc = "left", label.y.npc = "top"),
ylab = "CpG O/E", xlab = "Methylated frequency")+
border()
#Violinplot of fully meth and umeth by CpG O/E
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1),xlab = "", ylab = "CpG O/E", show.legend = FALSE) +
geom_violin(aes(fill = V2)) +
scale_fill_manual(values=c("#0073C2FF", "#EFC000FF")) +
labs(x="", y = "CpG O/E")+
theme(legend.position="none")
# Arranging the plots
ggarrange(sp, viol,
ncol = 2, nrow = 1,  align = "hv",
widths = c(2, 1), heights = c(1, 2),
common.legend = FALSE)
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1),xlab = "", ylab = "CpG O/E", show.legend = FALSE) +
geom_violin(aes(fill = V2)) +
scale_fill_manual(values=c("#0073C2FF", "#EFC000FF")) +
labs(x="", y = "CpG O/E")+
theme(legend.position="none") +
theme_classic()
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1),xlab = "", ylab = "CpG O/E", show.legend = FALSE) +
geom_violin(aes(fill = V2)) +
scale_fill_manual(values=c("#0073C2FF", "#EFC000FF")) +
labs(x="", y = "CpG O/E")+
theme(legend.position="none") +
theme_bw()
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1),xlab = "", ylab = "CpG O/E", show.legend = FALSE) +
geom_violin(aes(fill = V2)) +
scale_fill_manual(values=c("#0073C2FF", "#EFC000FF")) +
labs(x="", y = "CpG O/E")+
theme(legend.position="none") +
theme(axis.text = element_text(size = 5)) +
theme_bw()
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1),xlab = "", ylab = "CpG O/E", show.legend = FALSE) +
geom_violin(aes(fill = V2)) +
scale_fill_manual(values=c("#0073C2FF", "#EFC000FF")) +
labs(x="", y = "CpG O/E")+
theme(legend.position="none") +
theme(axis.text = element_text(size = 10)) +
theme_bw()
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1),xlab = "", ylab = "CpG O/E", show.legend = FALSE) +
geom_violin(aes(fill = V2)) +
scale_fill_manual(values=c("#0073C2FF", "#EFC000FF")) +
labs(x="", y = "CpG O/E")+
theme(legend.position="none") +
theme(axis.text = element_text(size = 20)) +
theme_bw()
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1),xlab = "", ylab = "CpG O/E", show.legend = FALSE) +
geom_violin(aes(fill = V2)) +
scale_fill_manual(values=c("#0073C2FF", "#EFC000FF")) +
labs(x="", y = "CpG O/E")+
theme(legend.position="none") +
theme(axis.title = element_text(size = 20))  +
theme_bw()
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1),xlab = "", ylab = "CpG O/E", show.legend = FALSE) +
geom_violin(aes(fill = V2)) +
scale_fill_manual(values=c("#0073C2FF", "#EFC000FF")) +
labs(x="", y = "CpG O/E")+
theme(legend.position="none") +
theme(axis.title = element_text(size = 40))  +
theme_bw()
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1),xlab = "", ylab = "CpG O/E", show.legend = FALSE) +
geom_violin(aes(fill = V2)) +
scale_fill_manual(values=c("#0073C2FF", "#EFC000FF")) +
labs(x="", y = "CpG O/E")+
theme(legend.position="none") +
theme(axis.title = element_text(size = 40))  +
viol
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1),xlab = "", ylab = "CpG O/E", show.legend = FALSE) +
geom_violin(aes(fill = V2)) +
scale_fill_manual(values=c("#0073C2FF", "#EFC000FF")) +
labs(x="", y = "CpG O/E")+
theme(legend.position="none") +
theme(axis.title = element_text(size = 40))
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1),xlab = "", ylab = "CpG O/E", show.legend = FALSE) +
geom_violin(aes(fill = V2)) +
scale_fill_manual(values=c("#0073C2FF", "#EFC000FF")) +
labs(x="", y = "CpG O/E")+
theme(legend.position="none") +
theme(axis.title = element_text(size = 20))
viol
viol <- ggplot(CpG_01, aes(x=V2, y=CpGOE_1),xlab = "", ylab = "CpG O/E", show.legend = FALSE) +
geom_violin(aes(fill = V2)) +
scale_fill_manual(values=c("#0073C2FF", "#EFC000FF")) +
labs(x="", y = "CpG O/E")+
theme(legend.position="none")
viol
sp
plot(x,y)
#Boxplot of fully meth and umeth by CpG O/E
bxp <- ggboxplot(CpG_01, x = "V2", y = "CpGOE_1",
color = "V2", palette = c("#0073C2FF", "#EFC000FF"),
xlab = "", ylab = "CpG O/E", show.legend = FALSE)
bxp
